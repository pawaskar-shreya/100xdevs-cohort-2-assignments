/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

const port = 3000;

module.exports = app;


let todoList = [
  // {
  //   id: 1,                                // Make this timestamp based
  //   title: "first todo", 
  //   completed: "false",
  //   description: "Complete this assignment today"
  // }
]


// 1. GET /todos - Retrieve all todo items
app.get('/todos', function(req, res) {
  res.status(200).json(todoList);
})


// 2.GET /todos/:id - Retrieve a specific todo item by ID
app.get('/todos/:id', function(req, res) {
  const idToGet = req.params.id;

  const indexToGet = indexIfExists(idToGet);
  if(indexToGet != -1) {
    res.status(200).json(todoList[indexToGet]);
  } else {
    res.status(404).send("Todo Not Found");
  }

})


// 3. POST /todos - Create a new todo item
app.post('/todos', function(req, res) {
  const newTodo = req.body;
  const newId = new Date().getTime();

  todoList.push({
    id: newId,
    title: newTodo.title,
    completed: newTodo.completed,
    description: newTodo.description
  })

  let last = todoList.length - 1
  res.status(201).json(todoList[last]);
})


// 4. PUT /todos/:id - Update an existing todo item by ID
app.put('/todos/:id', function(req, res) {
  const updateId = req.params.id;           // use params here as we are not passing id in query (like ?id=123) from postman
  const updatedTodo = req.body;
  
  const indexToUpdate = indexIfExists(updateId)
  if(indexToUpdate != -1) {

    // Updation is done using Object Spread Operator. It takes the old Obj, takes a new Obj, and sets new values into the old one. At the end, we have explicitily preserved the old id, even though it is not needed to be done in our case, as users can never provide a new id. 

    todoList[indexToUpdate] = {...todoList[indexToUpdate], ...updatedTodo, id: updateId};

    res.status(200).send("Todo found and updated :)");
  } else {
    res.status(404).send("Todo Not Found");
  }
  
})


// 5. DELETE /todos/:id - Delete a todo item by ID
app.delete('/todos/:id', function(req, res) {
  const idToDelete = req.params.id;
  const indexToDelete = indexIfExists(idToDelete);
  if(indexToDelete != -1) {

    // Use arr.splice() to delete. Takes 2 args. (Index To Start From, no Of Items To Delete)
    // So, we give the index of item to delete as the start and count as 1
    todoList.splice(indexToDelete, 1);

    res.status(200).send("Item found and deleted :)");
  } else {
    res.status(404).send("Todo Not Found");
  }
})


function indexIfExists(idToFind) {
  return todoList.findIndex(todo => todo.id == idToFind);
}


// For any other route not defined in the server return 404
app.use(function(req, res) {
  res.status(404).send("Route Not Found");
})

// This should be commented while testing, as if the port 3000 is taken by us here, it won't be available for the tests in other file
// app.listen(port);